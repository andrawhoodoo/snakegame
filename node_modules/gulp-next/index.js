// PLUGIN_NAME: gulp-next
// Vision: 1.0.8
// author: yumyfung
// date: 2016-10-27

/*

through-gulp使用注意事项：

1、需要特别注意的是，如果你需要处理的不同文件之间没有任何依赖，
在第一个函数函数内部处理完后，进行如下调用，即可将该文件的处理结果传递给下一个插件。
这种情况下，可以缺省第二个参数flushFunction。

2、如果需要处理的不同文件之间存在依赖，例如文件合并，需要所有文件全部读完之后再处理，
那么第一个参数transformFunction将每次传递进来的数据保存在内存中（绝对不要在这里调用this.push()方法），
第二个参数flushFunction统一做处理后，再传递给下一个插件。

*/

var through = require('through-gulp');

function next(cb) {

  var files = [];
  var fileList = [];

  var stream = through(function(file, encoding, callback) {
      if (file.isNull()) {}
      if (file.isBuffer()) {}
      if(file.isStream()) {}
      fileList.push(file.path);
      files.push(file); // 临时保存数据
      callback(); // 声明该文件处理完毕
    }, function(callback){
      for(var i = 0, len = files.length; i < len; i++){
        this.push(files[i]);  // 传递处理后数据给下一个插件
      }
      cb && typeof cb == 'function' ? cb(fileList) : '';
      callback();
    });

  return stream;
      
}

module.exports = next;