class Actor{constructor(){if(this.constructor===Actor)throw new Error("Cannot instantiate an Actor which is an interface.");if(!(this.update instanceof Function))throw new Error("Actor must have an update method.")}}
class ActorCollisionHandler{constructor(){this.pairs_=new Map}toKey_(t,i){return t+", "+i}addCollisionAction(t,i,s){this.pairs_.set(this.toKey_(t,i),s)}hasCollisionAction(t,i){return this.pairs_.has(this.toKey_(t,i))}applyCollisionAction(t,i){this.hasCollisionAction(t.type,i.type)&&this.pairs_.get(this.toKey_(t.type,i.type)).applyAction(t,i)}}
class ADKeyInputHandler extends KeyInputHandler{constructor(){super();window.addEventListener("keydown",e=>{68===e.keyCode?this.wasRightPushed_=!0:65===e.keyCode&&(this.wasLeftPushed_=!0)})}}
class ArrayIterator{constructor(r){this.arr_=r,this.index_=0}next(){let r=this.index_++,t=r===this.arr_.length;return{value:t?void 0:this.arr_[r],done:t}}forEach(r){this.arr_.forEach(t=>r(t))}}
class AvoidWallsPlayer extends Player{constructor(s){super(s)}makeTurn(){"left"===this.sc_.snakeDirection&&1==this.sc_.slitherer_.position.posX?this.sc_.slitherer_.position.posY<(this.sc_.worldHeight-1)/2?this.sc_.turnSnakeLeft():this.sc_.turnSnakeRight():"right"===this.sc_.snakeDirection&&this.sc_.slitherer_.position.posX==this.sc_.worldWidth-2?this.sc_.slitherer_.position.posY<(this.sc_.worldHeight-1)/2?this.sc_.turnSnakeRight():this.sc_.turnSnakeLeft():"up"===this.sc_.snakeDirection&&1==this.sc_.slitherer_.position.posY?this.sc_.slitherer_.position.posX<(this.sc_.worldWidth-1)/2?this.sc_.turnSnakeRight():this.sc_.turnSnakeLeft():"down"===this.sc_.snakeDirection&&this.sc_.slitherer_.position.posY==this.sc_.worldHeight-2&&(this.sc_.slitherer_.position.posX<(this.sc_.worldWidth-1)/2?this.sc_.turnSnakeLeft():this.sc_.turnSnakeRight())}}
class CanvasView extends View{constructor(t){super(),this.scalingFactor_=t,this.canvas_=document.createElement("canvas"),this.canvas_.id="game",document.body.appendChild(this.canvas_),this.context_=this.canvas_.getContext("2d")}display(t){this.canvas_.width=this.scalingFactor_*t.width,this.canvas_.height=this.scalingFactor_*t.height,t.actors.forEach(t=>{if("Snake"===t.type){this.context_.fillStyle=t.color;for(let s=0;s<t.parts_.length;s++)this.context_.fillRect(t.parts_[s].posX*this.scalingFactor_,t.parts_[s].posY*this.scalingFactor_,this.scalingFactor_,this.scalingFactor_)}else"Food"===t.type?(this.context_.fillStyle="rgb(0, 179, 202)",this.context_.fillRect(t.position.posX*this.scalingFactor_,t.position.posY*this.scalingFactor_,this.scalingFactor_,this.scalingFactor_)):"Wall"===t.type&&(this.context_.fillStyle="black",this.context_.fillRect(t.position.posX*this.scalingFactor_,t.position.posY*this.scalingFactor_,this.scalingFactor_,this.scalingFactor_))})}dispose(){document.body.removeChild(this.canvas_)}}
class Collidable extends Actor{constructor(){if(super(),this.constructor===Collidable)throw new Error("Cannot instantiate a Collidable which is an interface.");if(!(this.didCollide instanceof Function))throw new Error("Collidable must have a didCollide method.")}}
class CollisionHandler{constructor(){if(this.constructor===CollisionHandler)throw new Error("Cannot instantiate a CollisionHandler which is an Interface.");if(!(this.applyAction instanceof Function))throw new Error("Collision Handler must have an applyAction method.")}}
class Food extends Actor{constructor(t,i){super(),this.position_=new Point(t,i),this.isActive_=!0}eat(){this.isActive_=!1}get position(){return this.position_}get isActive(){return this.isActive_}get type(){return"Food"}update(){}}
class Game{constructor(){this.contextSwitches_=new Map,this.contextSwitches_.set("Start","Game"),this.contextSwitches_.set("Game","Start"),this.controllers_=new Map,this.controllers_.set("Start",new MainMenuController(this)),this.controllers_.set("Game",new GameController(this)),this.currentContext_="Start"}switchContext(t){this.currentContext_=this.contextSwitches_.get(this.currentContext_),this.controllers_.get(this.currentContext_).init(t)}run(t){this.controllers_.get(this.currentContext_).init(t)}}let SnakeGame=new Game;SnakeGame.run();
class GameController{constructor(e){this.game_=e;let l=new ActorCollisionHandler,n=new WallFoodCollisionHandler;l.addCollisionAction("Wall","Food",n);let a=new SnakeWallCollisionHandler;l.addCollisionAction("Snake","Wall",a);let o=new SnakeFoodCollisionHandler;l.addCollisionAction("Snake","Food",o);let t=new SnakeSnakeCollisionHandler;l.addCollisionAction("Snake","Snake",t),this.world_=new WorldModel(l,42,42),this.players_=[]}init(e){let l=[new LRKeyInputHandler,new ADKeyInputHandler],n=["red","blue"],a=["green","black","cyan","purple","magenta"];if(0!==e.numOfHumanPlayers&&e.numOfHumanPlayers<3)for(let a=1;a<e.numOfHumanPlayers+1;a++){let e=5*a,o=new Point(e,e),t=new Snake(o,5,n[a-1]),r=new SnakeController(this.world_,t),i=new HumanPlayer(r,l[a-1]);this.player=i,this.world_.addActor(t)}if(e.numOfHumanPlayers,0!==e.numOfAIPlayers)for(let l=1;l<e.numOfAIPlayers+1;l++){let e=5*l+10,n=new Point(e,e),o=new Snake(n,5,a[l-1]),t=new SnakeController(this.world_,o),r=new AvoidWallsPlayer(t);this.player=r,this.world_.addActor(o)}let o=new WorldLoader;levelCreation(),o.readData(snakeLevel,this.world_),this.world_.addView(new CanvasView(10)),this.run()}set player(e){if(!(e instanceof Player))throw new Error("Must provide a valid player.");this.players_.push(e)}run(){let e=0,l=l=>{e=l,requestAnimationFrame(n)},n=l=>{this.players_.forEach(e=>e.makeTurn()),l-e>200&&(this.world_.update(1),e+=200);let a=this.world_.actors,o=a.next();for(;!o.done&&"Snake"!==o.value.type;)o=a.next();o.done?(console.log("sorry, I have to reset"),this.players_=[],this.world_.reset(),this.game_.switchContext()):requestAnimationFrame(n)};this.players_.length>0?requestAnimationFrame(l):(this.players_=[],this.world_.reset(),this.game_.switchContext())}}
class HumanPlayer extends Player{constructor(e,t){super(e),this.inputHandler_=t}makeTurn(){1==this.inputHandler_.madeLeftMove()?(this.sc_.turnSnakeLeft(),this.inputHandler_.resetLeftMove()):1==this.inputHandler_.madeRightMove()&&(this.sc_.turnSnakeRight(),this.inputHandler_.resetRightMove())}}
class InputHandler{constructor(){if(!(this.madeRightMove instanceof Function))throw new Error("input handler must have madeRightMove method");if(!(this.madeLeftMove instanceof Function))throw new Error("input handler must have madeLeftMove method");if(!(this.resetRightMove instanceof Function))throw new Error("input handler must have resetRightMove method");if(!(this.resetLeftMove instanceof Function))throw new Error("input handler must have resetLeftMove method")}}
class KeyInputHandler extends InputHandler{constructor(){super(),this.wasLeftPushed_=!1,this.wasRightPushed_=!1}madeLeftMove(){return this.wasLeftPushed_}madeRightMove(){return this.wasRightPushed_}resetLeftMove(){this.wasLeftPushed_=!1}resetRightMove(){this.wasRightPushed_=!1}}
let snakeLevel=[];function levelCreation(){snakeLevel.push("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w   f                                    w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                 f      w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w         f                              w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                           f            w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w               f                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                     f                  w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                 f                      w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                         f              w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w           f                            w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                               f        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w     f                                  w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                     f  w"),snakeLevel.push("w                                        w"),snakeLevel.push("w                                        w"),snakeLevel.push("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww")}
class LRKeyInputHandler extends KeyInputHandler{constructor(){super();window.addEventListener("keydown",e=>{"ArrowRight"===e.key?this.wasRightPushed_=!0:"ArrowLeft"===e.key&&(this.wasLeftPushed_=!0)})}}
class MainMenuController{constructor(e){this.game_=e,this.playGameButton_=document.createElement("button"),this.humanPlayersInput_=document.createElement("input"),this.humanPlayersInput_.placeholder="Enter # of Human players",this.aiPlayersInput_=document.createElement("input"),this.aiPlayersInput_.placeholder="Enter # of AI players",this.playGameButton_.appendChild(document.createTextNode("Start Game!")),this.playGameButton_.addEventListener("click",this.switchContext_.bind(this))}init(e){document.getElementById("game-area").appendChild(this.humanPlayersInput_),document.getElementById("game-area").appendChild(this.aiPlayersInput_),document.getElementById("game-area").appendChild(this.playGameButton_)}switchContext_(){document.getElementById("game-area").removeChild(this.playGameButton_),document.getElementById("game-area").removeChild(this.humanPlayersInput_),document.getElementById("game-area").removeChild(this.aiPlayersInput_),this.game_.switchContext({numOfHumanPlayers:parseInt(this.humanPlayersInput_.value),numOfAIPlayers:parseInt(this.aiPlayersInput_.value)})}}
class Player{constructor(t){if(!(t instanceof SnakeController))throw new Error("Not given a valid Snake Controller.");if(this.sc_=t,this.constructor===Player)throw new Error("Cannot instantiate a Player, which is an abstract base class");if(!(this.makeTurn instanceof Function))throw new Error("Base class must implement makeTurn method.")}isActive(){return this.sc_.isSnakeActive}}
class Point{constructor(s,t){this.x_=s,this.y_=t}get posX(){return this.x_}get posY(){return this.y_}equals(s){return s.posX==this.posX&&s.posY==this.posY}}
class Snake extends Collidable{constructor(t,i,s){super(),this.isActive_=!0,this.color_=s||"orange",this.parts_=[t];for(let s=1;s<i-1;s++)this.parts_.push(new Point(t.posX,t.posY+s));this.currentDir_="right"}turnLeft(){"right"===this.currentDir_?this.currentDir_="up":"up"===this.currentDir_?this.currentDir_="left":"left"===this.currentDir_?this.currentDir_="down":"down"===this.currentDir_&&(this.currentDir_="right")}turnRight(){"right"===this.currentDir_?this.currentDir_="down":"up"===this.currentDir_?this.currentDir_="right":"left"===this.currentDir_?this.currentDir_="up":"down"===this.currentDir_&&(this.currentDir_="left")}move(t){for(let t=this.parts_.length-1;t>0;t-=1)this.parts_[t]=this.parts_[t-1];"right"===this.currentDir_?this.parts_[0]=new Point(this.position.posX+t,this.position.posY):"left"===this.currentDir_?this.parts_[0]=new Point(this.position.posX-t,this.position.posY):"up"===this.currentDir_?this.parts_[0]=new Point(this.position.posX,this.position.posY-t):"down"===this.currentDir_&&(this.parts_[0]=new Point(this.position.posX,this.position.posY+t))}get position(){return this.parts_[0]}get direction(){return this.currentDir_}didCollide(t){return t instanceof Snake?!(t!==this||!this.parts_.slice(1).some(t=>this.position.equals(t)))||!(t===this||!t.parts_.some(t=>this.position.equals(t))):!!this.position.equals(t.position)}update(t){this.move(t)}die(){this.isActive_=!1}get isActive(){return this.isActive_}grow(){"left"===this.direction?this.parts_.push(new Point(this.parts_[this.parts_.length-1].posX+1,this.parts_[this.parts_.length-1].posY)):"right"===this.direction?this.parts_.push(new Point(this.parts_[this.parts_.length-1].posX-1,this.parts_[this.parts_.length-1].posY)):"down"===this.direction?this.parts_.push(new Point(this.parts_[this.parts_.length-1].posX,this.parts_[this.parts_.length-1].posY-1)):this.parts_.push(new Point(this.parts_[this.parts_.length-1].posX,this.parts_[this.parts_.length-1].posY+1))}get type(){return"Snake"}get color(){return this.color_}}
class SnakeController{constructor(t,e){if(!(t instanceof WorldModel))throw new Error("Not given a valid WorldModel");if(this.snakeWorld_=t,!(e instanceof Snake))throw new Error("Not given a valid Snake");this.slitherer_=e}turnSnakeLeft(){this.slitherer_.turnLeft()}turnSnakeRight(){this.slitherer_.turnRight()}get snakePosition(){return this.slitherer_.position}get snakeDirection(){return this.slitherer_.direction}get worldHeight(){return this.snakeWorld_.height}get worldWidth(){return this.snakeWorld_.width}get isSnakeActive(){return this.slitherer_.isActive}}
class SnakeFoodCollisionHandler extends CollisionHandler{constructor(){super()}applyAction(o,l){l.eat(),o.grow()}}
class SnakeSnakeCollisionHandler extends CollisionHandler{constructor(){super()}applyAction(n,e){n.die()}}
class SnakeWallCollisionHandler extends CollisionHandler{constructor(){super()}applyAction(l,n){l.die()}}
class View{constructor(){if(this.constructor===View)throw new Error("Cannot instantiate a View, which is an interface");if(!(this.display instanceof Function))throw new Error("View class must implement display method.");if(!(this.dispose instanceof Function))throw new Error("View class must implement dispose method.")}}
class Wall extends Collidable{constructor(t,i){super(),this.position_=new Point(t,i),this.isActive_=!0}get position(){return this.position_}get isActive(){return this.isActive_}get type(){return"Wall"}update(){}didCollide(t){return"Food"===t.type&&(!!this.position_.equals(t.position)||void 0)}}
class WallFoodCollisionHandler extends CollisionHandler{constructor(){super()}applyAction(l,o){o.eat()}}
class WorldLoader{readData(a,d){a.forEach((a,o)=>a.split("").forEach((a,r)=>{"f"===a?d.addActor(new Food(r,o)):"w"===a&&d.addActor(new Wall(r,o))}))}}
class WorldModel{constructor(t,i,s){this.aca_=t,this.width_=i||100,this.height_=s||100,this.views_=[],this.actors_=[]}update(t){if(0===this.actors_.filter(t=>"Food"===t.type).length){let t=new Food(Math.floor(this.width_*Math.random()),Math.floor(this.height_*Math.random()));this.addActor(t);let i=new Wall(Math.floor(this.width_*Math.random()),Math.floor(this.height_*Math.random()));this.addActor(i)}this.actors_.forEach(i=>{"Snake"===i.type&&i.move(t)}),this.actors_.forEach(t=>{for(let i=0;i<this.actors_.length;i++)"Snake"===t.type&&t.didCollide(this.actors_[i])&&this.aca_.applyCollisionAction(t,this.actors_[i]),"Wall"===t.type&&t.didCollide(this.actors_[i])&&this.aca_.applyCollisionAction(t,this.actors_[i])}),this.actors_.forEach(t=>{for(let t=0;t<this.actors_.length;t++)this.actors_[t].isActive||this.actors_.splice(t,1)}),this.views_!=[]&&this.views_.forEach(t=>t.display(this))}get actors(){return new ArrayIterator(this.actors_)}get width(){return this.width_}get height(){return this.height_}get view(){return this.views_[0]}addActor(t){if(!(t instanceof Actor))throw new Error("Must be given a valid actor.");this.actors_.push(t)}addView(t){if(!(t instanceof View))throw new Error("Must be given a valid view.");this.views_.push(t)}reset(){this.views_.forEach(t=>t.dispose()),this.views_=[],this.actors_=[]}}